{"remainingRequest":"/Users/mirabilite/IdeaProjects/bishe/automatic-test-paper/node_modules/babel-loader/lib/index.js!/Users/mirabilite/IdeaProjects/bishe/automatic-test-paper/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/mirabilite/IdeaProjects/bishe/automatic-test-paper/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/mirabilite/IdeaProjects/bishe/automatic-test-paper/src/components/page/study/Upload.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/mirabilite/IdeaProjects/bishe/automatic-test-paper/src/components/page/study/Upload.vue","mtime":1676256414000},{"path":"/Users/mirabilite/IdeaProjects/bishe/automatic-test-paper/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/mirabilite/IdeaProjects/bishe/automatic-test-paper/node_modules/babel-loader/lib/index.js","mtime":456789000000},{"path":"/Users/mirabilite/IdeaProjects/bishe/automatic-test-paper/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/mirabilite/IdeaProjects/bishe/automatic-test-paper/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import SparkMD5 from 'spark-md5';\nimport axios from 'axios';\nimport $ from 'jquery';\nexport default {\n  name: 'Upload',\n  data() {\n    return {\n      options: {\n        target: 'http://127.0.0.1:8080/file/upload',\n        chunkSize: 5 * 1024 * 1000,\n        fileParameterName: 'file',\n        maxChunkRetries: 2,\n        testChunks: true,\n        //是否开启服务器分片校验\n        checkChunkUploadedByResponse: function (chunk, message) {\n          // 服务器分片校验函数，秒传及断点续传基础\n          let objMessage = JSON.parse(message);\n          if (objMessage.skipUpload) {\n            return true;\n          }\n          return (objMessage.uploaded || []).indexOf(chunk.offset + 1) >= 0;\n        },\n        headers: {\n          Authorization: ''\n        },\n        query() {}\n      }\n    };\n  },\n  computed: {\n    //Uploader实例\n    uploader() {\n      return this.$refs.uploader.uploader;\n    }\n  },\n  methods: {\n    onFileAdded(file) {\n      console.log(\"... onFileAdded\");\n      this.computeMD5(file);\n    },\n    onFileProgress(rootFile, file, chunk) {\n      console.log(\"... onFileProgress\");\n    },\n    onFileSuccess(rootFile, file, response, chunk) {\n      let res = JSON.parse(response);\n      // 如果服务端返回需要合并\n      if (res.needMerge) {\n        // 文件状态设为“合并中”\n        this.statusSet(file.id, 'merging');\n        let param = {\n          'filename': rootFile.name,\n          'identifier': rootFile.uniqueIdentifier,\n          'totalSize': rootFile.size\n        };\n        axios({\n          method: 'post',\n          url: \"http://127.0.0.1:8081/file/merge\",\n          data: param\n        }).then(res => {\n          this.statusRemove(file.id);\n        }).catch(e => {\n          console.log(\"合并异常,重新发起请求,文件名为:\", file.name);\n          file.retry();\n        });\n      }\n    },\n    onFileError(rootFile, file, response, chunk) {\n      console.log(\"... onFileError\");\n    },\n    computeMD5(file) {\n      let fileReader = new FileReader();\n      let time = new Date().getTime();\n      let blobSlice = File.prototype.slice || File.prototype.mozSlice || File.prototype.webkitSlice;\n      let currentChunk = 0;\n      const chunkSize = 10 * 1024 * 1000;\n      let chunks = Math.ceil(file.size / chunkSize);\n      let spark = new SparkMD5.ArrayBuffer();\n\n      // 文件状态设为\"计算MD5\"\n      this.statusSet(file.id, 'md5');\n      file.pause();\n      loadNext();\n      fileReader.onload = e => {\n        spark.append(e.target.result);\n        if (currentChunk < chunks) {\n          currentChunk++;\n          loadNext();\n\n          // 实时展示MD5的计算进度\n          this.$nextTick(() => {\n            $(`.myStatus_${file.id}`).text('校验MD5 ' + (currentChunk / chunks * 100).toFixed(0) + '%');\n          });\n        } else {\n          let md5 = spark.end();\n          this.computeMD5Success(md5, file);\n          console.log(`MD5计算完毕：${file.name} \\nMD5：${md5} \\n分片：${chunks} 大小:${file.size} 用时：${new Date().getTime() - time} ms`);\n        }\n      };\n      fileReader.onerror = function () {\n        this.error(`文件${file.name}读取出错，请检查该文件`);\n        file.cancel();\n      };\n      function loadNext() {\n        let start = currentChunk * chunkSize;\n        let end = start + chunkSize >= file.size ? file.size : start + chunkSize;\n        fileReader.readAsArrayBuffer(blobSlice.call(file.file, start, end));\n      }\n    },\n    statusSet(id, status) {\n      let statusMap = {\n        md5: {\n          text: '校验MD5',\n          bgc: '#fff'\n        },\n        merging: {\n          text: '合并中',\n          bgc: '#e2eeff'\n        },\n        transcoding: {\n          text: '转码中',\n          bgc: '#e2eeff'\n        },\n        failed: {\n          text: '上传失败',\n          bgc: '#e2eeff'\n        }\n      };\n      console.log(\".....\", status, \"...:\", statusMap[status].text);\n      this.$nextTick(() => {\n        // $(`<p class=\"myStatus_${id}\"></p>`).appendTo(`.file_${id} .uploader-file-status`).css({\n        $(`<p class=\"myStatus_${id}\"></p>`).appendTo(`#status`).css({\n          'position': 'absolute',\n          'top': '0',\n          'left': '0',\n          'right': '0',\n          'bottom': '0',\n          'zIndex': '1',\n          'line-height': 'initial',\n          'backgroundColor': statusMap[status].bgc\n        }).text(statusMap[status].text);\n      });\n    },\n    computeMD5Success(md5, file) {\n      Object.assign(this.uploader.opts, {\n        query: {\n          ...this.params\n        }\n      });\n      file.uniqueIdentifier = md5;\n      file.resume();\n      this.statusRemove(file.id);\n    },\n    statusRemove(id) {\n      this.$nextTick(() => {\n        $(`.myStatus_${id}`).remove();\n      });\n    }\n  }\n};",{"version":3,"mappings":"AAeA;AACA;AACA;AAEA;EACAA;EACAC;IACA;MACAC;QACAC;QACAC;QACAC;QACAC;QACAC;QAAA;QACAC;UACA;UACA;UACA;YACA;UACA;UACA;QACA;QACAC;UACAC;QACA;QACAC,SACA;MACA;IACA;EACA;EACAC;IACA;IACAC;MACA;IACA;EACA;EACAC;IACAC;MACAC;MACA;IACA;IACAC;MACAD;IACA;IACAE;MACA;MACA;MACA;QACA;QACA;QACA;UACA;UACA;UACA;QACA;QACAC;UACAC;UACAC;UACApB;QACA;UACA;QACA;UACAe;UACAM;QACA;MACA;IACA;IACAC;MACAP;IACA;IACAQ;MACA;MACA;MACA;MACA;MACA;MACA;MACA;;MAEA;MACA;MACAF;MAEAG;MAEAC;QAEAC;QAEA;UACAC;UACAH;;UAEA;UACA;YACAI;UACA;QACA;UACA;UACA;UACAb;QACA;MACA;MAEAU;QACA;QACAJ;MACA;MAEA;QACA;QACA;QAEAI;MACA;IACA;IACAI;MACA;QACAC;UACAC;UACAC;QACA;QACAC;UACAF;UACAC;QACA;QACAE;UACAH;UACAC;QACA;QACAG;UACAJ;UACAC;QACA;MACA;MAEAjB;MACA;QACA;QACAa;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;QACA;MACA;IACA;IACAQ;MACAC;QACA3B;UACA;QACA;MACA;MAEAW;MACAA;MACA;IACA;IACAiB;MACA;QACAV;MACA;IACA;EACA;AACA","names":["name","data","options","target","chunkSize","fileParameterName","maxChunkRetries","testChunks","checkChunkUploadedByResponse","headers","Authorization","query","computed","uploader","methods","onFileAdded","console","onFileProgress","onFileSuccess","axios","method","url","file","onFileError","computeMD5","loadNext","fileReader","spark","currentChunk","$","statusSet","md5","text","bgc","merging","transcoding","failed","computeMD5Success","Object","statusRemove"],"sourceRoot":"src/components/page/study","sources":["Upload.vue"],"sourcesContent":["<template>\r\n  <div>\r\n    状态：<div id=\"status\"></div>\r\n    <uploader ref=\"uploader\"\r\n              :options=\"options\"\r\n              :autoStart=\"true\"\r\n              @file-added=\"onFileAdded\"\r\n              @file-success=\"onFileSuccess\"\r\n              @file-progress=\"onFileProgress\"\r\n              @file-error=\"onFileError\">\r\n    </uploader>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport SparkMD5 from 'spark-md5';\r\nimport axios from 'axios';\r\nimport $ from 'jquery'\r\n\r\nexport default {\r\n  name: 'Upload',\r\n  data() {\r\n    return {\r\n      options: {\r\n        target: 'http://127.0.0.1:8080/file/upload',\r\n        chunkSize: 5 * 1024 * 1000,\r\n        fileParameterName: 'file',\r\n        maxChunkRetries: 2,\r\n        testChunks: true,   //是否开启服务器分片校验\r\n        checkChunkUploadedByResponse: function (chunk, message) {\r\n          // 服务器分片校验函数，秒传及断点续传基础\r\n          let objMessage = JSON.parse(message);\r\n          if (objMessage.skipUpload) {\r\n            return true;\r\n          }\r\n          return (objMessage.uploaded || []).indexOf(chunk.offset + 1) >= 0\r\n        },\r\n        headers: {\r\n          Authorization: ''\r\n        },\r\n        query() {\r\n        }\r\n      }\r\n    }\r\n  },\r\n  computed: {\r\n    //Uploader实例\r\n    uploader() {\r\n      return this.$refs.uploader.uploader;\r\n    }\r\n  },\r\n  methods: {\r\n    onFileAdded(file) {\r\n      console.log(\"... onFileAdded\")\r\n      this.computeMD5(file);\r\n    },\r\n    onFileProgress(rootFile, file, chunk) {\r\n      console.log(\"... onFileProgress\")\r\n    },\r\n    onFileSuccess(rootFile, file, response, chunk) {\r\n      let res = JSON.parse(response);\r\n      // 如果服务端返回需要合并\r\n      if (res.needMerge) {\r\n        // 文件状态设为“合并中”\r\n        this.statusSet(file.id, 'merging');\r\n        let param = {\r\n          'filename': rootFile.name,\r\n          'identifier': rootFile.uniqueIdentifier,\r\n          'totalSize': rootFile.size\r\n        }\r\n        axios({\r\n          method: 'post',\r\n          url: \"http://127.0.0.1:8081/file/merge\",\r\n          data: param\r\n        }).then(res => {\r\n          this.statusRemove(file.id);\r\n        }).catch(e => {\r\n          console.log(\"合并异常,重新发起请求,文件名为:\", file.name)\r\n          file.retry();\r\n        });\r\n      }\r\n    },\r\n    onFileError(rootFile, file, response, chunk) {\r\n      console.log(\"... onFileError\")\r\n    },\r\n    computeMD5(file) {\r\n      let fileReader = new FileReader();\r\n      let time = new Date().getTime();\r\n      let blobSlice = File.prototype.slice || File.prototype.mozSlice || File.prototype.webkitSlice;\r\n      let currentChunk = 0;\r\n      const chunkSize = 10 * 1024 * 1000;\r\n      let chunks = Math.ceil(file.size / chunkSize);\r\n      let spark = new SparkMD5.ArrayBuffer();\r\n\r\n      // 文件状态设为\"计算MD5\"\r\n      this.statusSet(file.id, 'md5');\r\n      file.pause();\r\n\r\n      loadNext();\r\n\r\n      fileReader.onload = (e => {\r\n\r\n        spark.append(e.target.result);\r\n\r\n        if (currentChunk < chunks) {\r\n          currentChunk++;\r\n          loadNext();\r\n\r\n          // 实时展示MD5的计算进度\r\n          this.$nextTick(() => {\r\n            $(`.myStatus_${file.id}`).text('校验MD5 ' + ((currentChunk / chunks) * 100).toFixed(0) + '%')\r\n          })\r\n        } else {\r\n          let md5 = spark.end();\r\n          this.computeMD5Success(md5, file);\r\n          console.log(`MD5计算完毕：${file.name} \\nMD5：${md5} \\n分片：${chunks} 大小:${file.size} 用时：${new Date().getTime() - time} ms`);\r\n        }\r\n      });\r\n\r\n      fileReader.onerror = function () {\r\n        this.error(`文件${file.name}读取出错，请检查该文件`)\r\n        file.cancel();\r\n      };\r\n\r\n      function loadNext() {\r\n        let start = currentChunk * chunkSize;\r\n        let end = ((start + chunkSize) >= file.size) ? file.size : start + chunkSize;\r\n\r\n        fileReader.readAsArrayBuffer(blobSlice.call(file.file, start, end));\r\n      }\r\n    },\r\n    statusSet(id, status) {\r\n      let statusMap = {\r\n        md5: {\r\n          text: '校验MD5',\r\n          bgc: '#fff'\r\n        },\r\n        merging: {\r\n          text: '合并中',\r\n          bgc: '#e2eeff'\r\n        },\r\n        transcoding: {\r\n          text: '转码中',\r\n          bgc: '#e2eeff'\r\n        },\r\n        failed: {\r\n          text: '上传失败',\r\n          bgc: '#e2eeff'\r\n        }\r\n      }\r\n\r\n      console.log(\".....\", status, \"...:\", statusMap[status].text)\r\n      this.$nextTick(() => {\r\n        // $(`<p class=\"myStatus_${id}\"></p>`).appendTo(`.file_${id} .uploader-file-status`).css({\r\n        $(`<p class=\"myStatus_${id}\"></p>`).appendTo(`#status`).css({\r\n          'position': 'absolute',\r\n          'top': '0',\r\n          'left': '0',\r\n          'right': '0',\r\n          'bottom': '0',\r\n          'zIndex': '1',\r\n          'line-height': 'initial',\r\n          'backgroundColor': statusMap[status].bgc\r\n        }).text(statusMap[status].text);\r\n      })\r\n    },\r\n    computeMD5Success(md5, file) {\r\n      Object.assign(this.uploader.opts, {\r\n        query: {\r\n          ...this.params,\r\n        }\r\n      })\r\n\r\n      file.uniqueIdentifier = md5;\r\n      file.resume();\r\n      this.statusRemove(file.id);\r\n    },\r\n    statusRemove(id) {\r\n      this.$nextTick(() => {\r\n        $(`.myStatus_${id}`).remove();\r\n      })\r\n    },\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n\r\n</style>"]}]}