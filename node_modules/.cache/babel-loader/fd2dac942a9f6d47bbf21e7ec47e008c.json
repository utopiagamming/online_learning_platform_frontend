{"remainingRequest":"D:\\working\\projectCodes\\automatic-test-paper\\node_modules\\babel-loader\\lib\\index.js!D:\\working\\projectCodes\\automatic-test-paper\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!D:\\working\\projectCodes\\automatic-test-paper\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\working\\projectCodes\\automatic-test-paper\\node_modules\\vue-simple-uploader\\src\\components\\uploader.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\working\\projectCodes\\automatic-test-paper\\node_modules\\vue-simple-uploader\\src\\components\\uploader.vue","mtime":499162500000},{"path":"D:\\working\\projectCodes\\automatic-test-paper\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\working\\projectCodes\\automatic-test-paper\\node_modules\\babel-loader\\lib\\index.js","mtime":456789000000},{"path":"D:\\working\\projectCodes\\automatic-test-paper\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\working\\projectCodes\\automatic-test-paper\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import Uploader from 'simple-uploader.js';\nimport { kebabCase } from '../common/utils';\nimport UploaderBtn from './btn.vue';\nimport UploaderDrop from './drop.vue';\nimport UploaderUnsupport from './unsupport.vue';\nimport UploaderList from './list.vue';\nimport UploaderFiles from './files.vue';\nimport UploaderFile from './file.vue';\nconst COMPONENT_NAME = 'uploader';\nconst FILE_ADDED_EVENT = 'fileAdded';\nconst FILES_ADDED_EVENT = 'filesAdded';\nconst UPLOAD_START_EVENT = 'uploadStart';\nexport default {\n  name: COMPONENT_NAME,\n  provide() {\n    return {\n      uploader: this\n    };\n  },\n  props: {\n    options: {\n      type: Object,\n      default() {\n        return {};\n      }\n    },\n    autoStart: {\n      type: Boolean,\n      default: true\n    },\n    fileStatusText: {\n      type: [Object, Function],\n      default() {\n        return {\n          success: 'success',\n          error: 'error',\n          uploading: 'uploading',\n          paused: 'paused',\n          waiting: 'waiting'\n        };\n      }\n    }\n  },\n  data() {\n    return {\n      started: false,\n      files: [],\n      fileList: []\n    };\n  },\n  methods: {\n    uploadStart() {\n      this.started = true;\n    },\n    fileAdded(file) {\n      this.$emit(kebabCase(FILE_ADDED_EVENT), file);\n      if (file.ignored) {\n        // is ignored, filter it\n        return false;\n      }\n    },\n    filesAdded(files, fileList) {\n      this.$emit(kebabCase(FILES_ADDED_EVENT), files, fileList);\n      if (files.ignored || fileList.ignored) {\n        // is ignored, filter it\n        return false;\n      }\n    },\n    fileRemoved(file) {\n      this.files = this.uploader.files;\n      this.fileList = this.uploader.fileList;\n    },\n    filesSubmitted(files, fileList) {\n      this.files = this.uploader.files;\n      this.fileList = this.uploader.fileList;\n      if (this.autoStart) {\n        this.uploader.upload();\n      }\n    },\n    allEvent(...args) {\n      const name = args[0];\n      const EVENTSMAP = {\n        [FILE_ADDED_EVENT]: true,\n        [FILES_ADDED_EVENT]: true,\n        [UPLOAD_START_EVENT]: 'uploadStart'\n      };\n      const handler = EVENTSMAP[name];\n      if (handler) {\n        if (handler === true) {\n          return;\n        }\n        this[handler].apply(this, args.slice(1));\n      }\n      args[0] = kebabCase(name);\n      this.$emit.apply(this, args);\n    }\n  },\n  created() {\n    this.options.initialPaused = !this.autoStart;\n    const uploader = new Uploader(this.options);\n    this.uploader = uploader;\n    this.uploader.fileStatusText = this.fileStatusText;\n    uploader.on('catchAll', this.allEvent);\n    uploader.on(FILE_ADDED_EVENT, this.fileAdded);\n    uploader.on(FILES_ADDED_EVENT, this.filesAdded);\n    uploader.on('fileRemoved', this.fileRemoved);\n    uploader.on('filesSubmitted', this.filesSubmitted);\n  },\n  destroyed() {\n    const uploader = this.uploader;\n    uploader.off('catchAll', this.allEvent);\n    uploader.off(FILE_ADDED_EVENT, this.fileAdded);\n    uploader.off(FILES_ADDED_EVENT, this.filesAdded);\n    uploader.off('fileRemoved', this.fileRemoved);\n    uploader.off('filesSubmitted', this.filesSubmitted);\n    this.uploader = null;\n  },\n  components: {\n    UploaderBtn,\n    UploaderDrop,\n    UploaderUnsupport,\n    UploaderList,\n    UploaderFiles,\n    UploaderFile\n  }\n};",{"version":3,"mappings":"AAeA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;EACAA;EACAC;IACA;MACAC;IACA;EACA;EACAC;IACAC;MACAC;MACAC;QACA;MACA;IACA;IACAC;MACAF;MACAC;IACA;IACAE;MACAH;MACAC;QACA;UACAG;UACAC;UACAC;UACAC;UACAC;QACA;MACA;IACA;EACA;EACAC;IACA;MACAC;MACAC;MACAC;IACA;EACA;EACAC;IACAC;MACA;IACA;IACAC;MACA;MACA;QACA;QACA;MACA;IACA;IACAC;MACA;MACA;QACA;QACA;MACA;IACA;IACAC;MACA;MACA;IACA;IACAC;MACA;MACA;MACA;QACA;MACA;IACA;IACAC;MACA;MACA;QACA;QACA;QACA;MACA;MACA;MACA;QACA;UACA;QACA;QACA;MACA;MACAC;MACA;IACA;EACA;EACAC;IACA;IACA;IACA;IACA;IACAxB;IACAA;IACAA;IACAA;IACAA;EACA;EACAyB;IACA;IACAzB;IACAA;IACAA;IACAA;IACAA;IACA;EACA;EACA0B;IACAC;IACAC;IACAC;IACAC;IACAC;IACAC;EACA;AACA","names":["name","provide","uploader","props","options","type","default","autoStart","fileStatusText","success","error","uploading","paused","waiting","data","started","files","fileList","methods","uploadStart","fileAdded","filesAdded","fileRemoved","filesSubmitted","allEvent","args","created","destroyed","components","UploaderBtn","UploaderDrop","UploaderUnsupport","UploaderList","UploaderFiles","UploaderFile"],"sourceRoot":"node_modules/vue-simple-uploader/src/components","sources":["uploader.vue"],"sourcesContent":["<template>\n  <div class=\"uploader\">\n    <slot :files=\"files\" :file-list=\"fileList\" :started=\"started\">\n      <uploader-unsupport></uploader-unsupport>\n      <uploader-drop>\n        <p>Drop files here to upload or</p>\n        <uploader-btn>select files</uploader-btn>\n        <uploader-btn :directory=\"true\">select folder</uploader-btn>\n      </uploader-drop>\n      <uploader-list></uploader-list>\n    </slot>\n  </div>\n</template>\n\n<script>\n  import Uploader from 'simple-uploader.js'\n  import { kebabCase } from '../common/utils'\n  import UploaderBtn from './btn.vue'\n  import UploaderDrop from './drop.vue'\n  import UploaderUnsupport from './unsupport.vue'\n  import UploaderList from './list.vue'\n  import UploaderFiles from './files.vue'\n  import UploaderFile from './file.vue'\n\n  const COMPONENT_NAME = 'uploader'\n  const FILE_ADDED_EVENT = 'fileAdded'\n  const FILES_ADDED_EVENT = 'filesAdded'\n  const UPLOAD_START_EVENT = 'uploadStart'\n\n  export default {\n    name: COMPONENT_NAME,\n    provide () {\n      return {\n        uploader: this\n      }\n    },\n    props: {\n      options: {\n        type: Object,\n        default () {\n          return {}\n        }\n      },\n      autoStart: {\n        type: Boolean,\n        default: true\n      },\n      fileStatusText: {\n        type: [Object, Function],\n        default () {\n          return {\n            success: 'success',\n            error: 'error',\n            uploading: 'uploading',\n            paused: 'paused',\n            waiting: 'waiting'\n          }\n        }\n      }\n    },\n    data () {\n      return {\n        started: false,\n        files: [],\n        fileList: []\n      }\n    },\n    methods: {\n      uploadStart () {\n        this.started = true\n      },\n      fileAdded (file) {\n        this.$emit(kebabCase(FILE_ADDED_EVENT), file)\n        if (file.ignored) {\n          // is ignored, filter it\n          return false\n        }\n      },\n      filesAdded (files, fileList) {\n        this.$emit(kebabCase(FILES_ADDED_EVENT), files, fileList)\n        if (files.ignored || fileList.ignored) {\n          // is ignored, filter it\n          return false\n        }\n      },\n      fileRemoved (file) {\n        this.files = this.uploader.files\n        this.fileList = this.uploader.fileList\n      },\n      filesSubmitted (files, fileList) {\n        this.files = this.uploader.files\n        this.fileList = this.uploader.fileList\n        if (this.autoStart) {\n          this.uploader.upload()\n        }\n      },\n      allEvent (...args) {\n        const name = args[0]\n        const EVENTSMAP = {\n          [FILE_ADDED_EVENT]: true,\n          [FILES_ADDED_EVENT]: true,\n          [UPLOAD_START_EVENT]: 'uploadStart'\n        }\n        const handler = EVENTSMAP[name]\n        if (handler) {\n          if (handler === true) {\n            return\n          }\n          this[handler].apply(this, args.slice(1))\n        }\n        args[0] = kebabCase(name)\n        this.$emit.apply(this, args)\n      }\n    },\n    created () {\n      this.options.initialPaused = !this.autoStart\n      const uploader = new Uploader(this.options)\n      this.uploader = uploader\n      this.uploader.fileStatusText = this.fileStatusText\n      uploader.on('catchAll', this.allEvent)\n      uploader.on(FILE_ADDED_EVENT, this.fileAdded)\n      uploader.on(FILES_ADDED_EVENT, this.filesAdded)\n      uploader.on('fileRemoved', this.fileRemoved)\n      uploader.on('filesSubmitted', this.filesSubmitted)\n    },\n    destroyed () {\n      const uploader = this.uploader\n      uploader.off('catchAll', this.allEvent)\n      uploader.off(FILE_ADDED_EVENT, this.fileAdded)\n      uploader.off(FILES_ADDED_EVENT, this.filesAdded)\n      uploader.off('fileRemoved', this.fileRemoved)\n      uploader.off('filesSubmitted', this.filesSubmitted)\n      this.uploader = null\n    },\n    components: {\n      UploaderBtn,\n      UploaderDrop,\n      UploaderUnsupport,\n      UploaderList,\n      UploaderFiles,\n      UploaderFile\n    }\n  }\n</script>\n\n<style>\n  .uploader {\n    position: relative;\n  }\n</style>\n"]}]}