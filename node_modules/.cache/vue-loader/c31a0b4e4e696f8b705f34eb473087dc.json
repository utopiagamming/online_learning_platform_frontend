{"remainingRequest":"/Users/mirabilite/IdeaProjects/version1/automatic-test-paper/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/mirabilite/IdeaProjects/version1/automatic-test-paper/node_modules/vue-easy-print/src/lib/vue-easy-print.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/mirabilite/IdeaProjects/version1/automatic-test-paper/node_modules/vue-easy-print/src/lib/vue-easy-print.vue","mtime":1552024696000},{"path":"/Users/mirabilite/IdeaProjects/version1/automatic-test-paper/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/mirabilite/IdeaProjects/version1/automatic-test-paper/node_modules/babel-loader/lib/index.js","mtime":456789000000},{"path":"/Users/mirabilite/IdeaProjects/version1/automatic-test-paper/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/mirabilite/IdeaProjects/version1/automatic-test-paper/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["\r\nexport default {\r\n    name: \"vue-easy-print\",\r\n    components: {},\r\n    props: {\r\n        // 针对分页表格模式：末尾空白行插入\r\n        spaceRow: {\r\n            type: Boolean,\r\n            default: false\r\n        },\r\n\r\n        // 针对分页表格模式：传入的打印数据。\r\n        tableData: {\r\n            type: Object,\r\n            default() {\r\n                return undefined;\r\n            }\r\n        },\r\n        // 是否显示表格\r\n        tableShow: {\r\n            type: Boolean,\r\n            default: false\r\n        },\r\n        // 是否显示默认的打印按钮\r\n        buttonShow: {\r\n            type: Boolean,\r\n            default: false\r\n        },\r\n        buttonClass: {\r\n            type: String,\r\n            default: \"el-button el-button--default\"\r\n        },\r\n        // 每页多少行\r\n        onePageRow: {\r\n            type: Number,\r\n            default: 5\r\n        },\r\n\r\n        beforeCopy: Function,\r\n        beforePrint: Function\r\n    },\r\n    data() {\r\n        return {\r\n        };\r\n    },\r\n    mounted() {\r\n        this.init();\r\n    },\r\n    methods: {\r\n        init() {\r\n            let printI = document.getElementById(\"easyPrintIframe\");\r\n            if (!printI) {\r\n                printI = document.createElement(\"iframe\");\r\n                printI.id = \"easyPrintIframe\";\r\n                printI.style.position = 'fixed'\r\n                printI.style.width = '0'\r\n                printI.style.height = '0'\r\n                printI.style.top = '-100px'\r\n\r\n                // 兼容ie\r\n                if (\r\n                    window.location.hostname !== document.domain &&\r\n                    navigator.userAgent.match(/msie/i)\r\n                ) {\r\n                    \r\n                    printI.src =\r\n                        'javascript:document.write(\"<head><script>document.domain=\\\\\"' +\r\n                        document.domain +\r\n                        '\\\\\";</s' +\r\n                        'cript></head><body></body>\")';\r\n                   \r\n                }\r\n                printI.onload = () => {\r\n                    this.getStyle();\r\n                }\r\n                 \r\n                document.body.appendChild(printI);\r\n            }else{\r\n                this.getStyle();\r\n            } \r\n        },\r\n        print() {\r\n            if (typeof this.beforeCopy === \"function\") {\r\n                // 检测到有复制前需要执行的功能\r\n                this.beforeCopy();\r\n            }\r\n\r\n            let $iframe = document.getElementById(\"easyPrintIframe\");\r\n            // 复制body，打印内容\r\n            $iframe.contentDocument.body.innerHTML = this.$refs.template.innerHTML;\r\n\r\n            if (typeof this.beforePrint === \"function\") {\r\n                // 检测到有打印前需要执行的功能\r\n                // 比如有些二维码组件无法直接复制dom完成。\r\n                this.beforePrint();\r\n            }\r\n            \r\n            // 执行打印\r\n            this.$nextTick(() => { \r\n                setTimeout(() => {\r\n                    $iframe.contentWindow.print();\r\n                }, 100);\r\n             })\r\n        },\r\n        getStyle() {\r\n            let printI = document.getElementById(\"easyPrintIframe\");\r\n            var str = \"\",\r\n                styles1 = document.querySelectorAll(\"style\");\r\n            for (var i = 0; i < styles1.length; i++) {\r\n                str += styles1[i].outerHTML;\r\n            }\r\n\r\n            printI.contentDocument.head.innerHTML = str;\r\n            // 添加link引入\r\n            let styles = document.querySelectorAll(\"link\");\r\n            for (let i = 0; i < styles.length; i++) {\r\n                // chrome 正常，firefox不正常，能执行到，但是添加没结果\r\n                let link = document.createElement(\"link\");\r\n                link.setAttribute(\"rel\", \"stylesheet\");\r\n                if(styles[i].type) link.setAttribute(\"type\", styles[i].type);\r\n                else link.setAttribute(\"type\", 'text/css');\r\n                link.setAttribute(\"href\", styles[i].href);\r\n                link.setAttribute('media','all');\r\n                printI.contentDocument.head.appendChild(link);\r\n            }\r\n            \r\n        },\r\n        getChineseNumber(currencyDigits) {\r\n            // 转换数字到中文大写，请用prop传递给模版组件，这个函数在网上扣的。\r\n            var MAXIMUM_NUMBER = 99999999999.99;\r\n            // Predefine the radix characters and currency symbols for output:\r\n            var CN_ZERO = \"零\";\r\n            var CN_ONE = \"壹\";\r\n            var CN_TWO = \"贰\";\r\n            var CN_THREE = \"叁\";\r\n            var CN_FOUR = \"肆\";\r\n            var CN_FIVE = \"伍\";\r\n            var CN_SIX = \"陆\";\r\n            var CN_SEVEN = \"柒\";\r\n            var CN_EIGHT = \"捌\";\r\n            var CN_NINE = \"玖\";\r\n            var CN_TEN = \"拾\";\r\n            var CN_HUNDRED = \"佰\";\r\n            var CN_THOUSAND = \"仟\";\r\n            var CN_TEN_THOUSAND = \"万\";\r\n            var CN_HUNDRED_MILLION = \"亿\";\r\n            var CN_SYMBOL = \"\"; // 可以设置前缀 比如 人民币\r\n            var CN_DOLLAR = \"元\";\r\n            var CN_TEN_CENT = \"角\";\r\n            var CN_CENT = \"分\";\r\n            var CN_INTEGER = \"整\";\r\n\r\n            // Variables:\r\n            var integral; // Represent integral part of digit number.\r\n            var decimal; // Represent decimal part of digit number.\r\n            var outputCharacters; // The output result.\r\n            var parts;\r\n            var digits, radices, bigRadices, decimals;\r\n            var zeroCount;\r\n            var i, p, d;\r\n            var quotient, modulus;\r\n\r\n            // Validate input string:\r\n            if (currencyDigits === undefined) {\r\n                return \"\";\r\n            }\r\n            currencyDigits = currencyDigits.toString();\r\n            if (currencyDigits == \"\") {\r\n                // alert(\"Empty input!\");\r\n                return \"\";\r\n            }\r\n            if (currencyDigits.match(/[^,.\\d]/) != null) {\r\n                // alert(\"Invalid characters in the input string!\");\r\n                return \"\";\r\n            }\r\n            if (\r\n                currencyDigits.match(\r\n                    /^((\\d{1,3}(,\\d{3})*(.((\\d{3},)*\\d{1,3}))?)|(\\d+(.\\d+)?))$/\r\n                ) == null\r\n            ) {\r\n                // alert(\"Illegal format of digit number!\");\r\n                return \"\";\r\n            }\r\n\r\n            // Normalize the format of input digits:\r\n            currencyDigits = currencyDigits.replace(/,/g, \"\"); // Remove comma delimiters.\r\n            currencyDigits = currencyDigits.replace(/^0+/, \"\"); // Trim zeros at the beginning.\r\n            // Assert the number is not greater than the maximum number.\r\n            if (Number(currencyDigits) > MAXIMUM_NUMBER) {\r\n                alert(\"您输入的金额太大，请重新输入!\");\r\n                return \"\";\r\n            }\r\n\r\n            // Process the coversion from currency digits to characters:\r\n            // Separate integral and decimal parts before processing coversion:\r\n            parts = currencyDigits.split(\".\");\r\n            if (parts.length > 1) {\r\n                integral = parts[0];\r\n                decimal = parts[1];\r\n                // Cut down redundant decimal digits that are after the second.\r\n                decimal = decimal.substr(0, 2);\r\n            } else {\r\n                integral = parts[0];\r\n                decimal = \"\";\r\n            }\r\n            // Prepare the characters corresponding to the digits:\r\n            digits = new Array(\r\n                CN_ZERO,\r\n                CN_ONE,\r\n                CN_TWO,\r\n                CN_THREE,\r\n                CN_FOUR,\r\n                CN_FIVE,\r\n                CN_SIX,\r\n                CN_SEVEN,\r\n                CN_EIGHT,\r\n                CN_NINE\r\n            );\r\n            radices = new Array(\"\", CN_TEN, CN_HUNDRED, CN_THOUSAND);\r\n            bigRadices = new Array(\"\", CN_TEN_THOUSAND, CN_HUNDRED_MILLION);\r\n            decimals = new Array(CN_TEN_CENT, CN_CENT);\r\n            // Start processing:\r\n            outputCharacters = \"\";\r\n            // Process integral part if it is larger than 0:\r\n            if (Number(integral) > 0) {\r\n                zeroCount = 0;\r\n                for (i = 0; i < integral.length; i++) {\r\n                    p = integral.length - i - 1;\r\n                    d = integral.substr(i, 1);\r\n                    quotient = p / 4;\r\n                    modulus = p % 4;\r\n                    if (d == \"0\") {\r\n                        zeroCount++;\r\n                    } else {\r\n                        if (zeroCount > 0) {\r\n                            outputCharacters += digits[0];\r\n                        }\r\n                        zeroCount = 0;\r\n                        outputCharacters +=\r\n                            digits[Number(d)] + radices[modulus];\r\n                    }\r\n                    if (modulus == 0 && zeroCount < 4) {\r\n                        outputCharacters += bigRadices[quotient];\r\n                    }\r\n                }\r\n                outputCharacters += CN_DOLLAR;\r\n            }\r\n            // Process decimal part if there is:\r\n            if (decimal != \"\") {\r\n                for (i = 0; i < decimal.length; i++) {\r\n                    d = decimal.substr(i, 1);\r\n                    if (d != \"0\") {\r\n                        outputCharacters += digits[Number(d)] + decimals[i];\r\n                    }\r\n                }\r\n            }\r\n            // Confirm and return the final output string:\r\n            if (outputCharacters == \"\") {\r\n                outputCharacters = CN_ZERO + CN_DOLLAR;\r\n            }\r\n            if (decimal == \"\") {\r\n                outputCharacters += CN_INTEGER;\r\n            }\r\n            outputCharacters = CN_SYMBOL + outputCharacters;\r\n            return outputCharacters;\r\n        }\r\n    }\r\n};\r\n",{"version":3,"sources":["vue-easy-print.vue"],"names":[],"mappings":";AAeA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"vue-easy-print.vue","sourceRoot":"node_modules/vue-easy-print/src/lib","sourcesContent":["<template>\r\n    <div>\r\n        <div v-show=\"tableShow\" ref=\"template\">\r\n            <slot :getChineseNumber=\"getChineseNumber\">\r\n                <span>编写你自己的打印区域组件，然后slot插入到vue-easy-print</span>\r\n            </slot>\r\n        </div>\r\n        <!-- 这里按钮偷了个懒，直接拿了element-ui的css name来用。 -->\r\n        <button v-if=\"buttonShow\" @click=\"print\" type=\"button\" :class=\"buttonClass\">\r\n            <span>开始打印</span>\r\n        </button>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n    name: \"vue-easy-print\",\r\n    components: {},\r\n    props: {\r\n        // 针对分页表格模式：末尾空白行插入\r\n        spaceRow: {\r\n            type: Boolean,\r\n            default: false\r\n        },\r\n\r\n        // 针对分页表格模式：传入的打印数据。\r\n        tableData: {\r\n            type: Object,\r\n            default() {\r\n                return undefined;\r\n            }\r\n        },\r\n        // 是否显示表格\r\n        tableShow: {\r\n            type: Boolean,\r\n            default: false\r\n        },\r\n        // 是否显示默认的打印按钮\r\n        buttonShow: {\r\n            type: Boolean,\r\n            default: false\r\n        },\r\n        buttonClass: {\r\n            type: String,\r\n            default: \"el-button el-button--default\"\r\n        },\r\n        // 每页多少行\r\n        onePageRow: {\r\n            type: Number,\r\n            default: 5\r\n        },\r\n\r\n        beforeCopy: Function,\r\n        beforePrint: Function\r\n    },\r\n    data() {\r\n        return {\r\n        };\r\n    },\r\n    mounted() {\r\n        this.init();\r\n    },\r\n    methods: {\r\n        init() {\r\n            let printI = document.getElementById(\"easyPrintIframe\");\r\n            if (!printI) {\r\n                printI = document.createElement(\"iframe\");\r\n                printI.id = \"easyPrintIframe\";\r\n                printI.style.position = 'fixed'\r\n                printI.style.width = '0'\r\n                printI.style.height = '0'\r\n                printI.style.top = '-100px'\r\n\r\n                // 兼容ie\r\n                if (\r\n                    window.location.hostname !== document.domain &&\r\n                    navigator.userAgent.match(/msie/i)\r\n                ) {\r\n                    \r\n                    printI.src =\r\n                        'javascript:document.write(\"<head><script>document.domain=\\\\\"' +\r\n                        document.domain +\r\n                        '\\\\\";</s' +\r\n                        'cript></head><body></body>\")';\r\n                   \r\n                }\r\n                printI.onload = () => {\r\n                    this.getStyle();\r\n                }\r\n                 \r\n                document.body.appendChild(printI);\r\n            }else{\r\n                this.getStyle();\r\n            } \r\n        },\r\n        print() {\r\n            if (typeof this.beforeCopy === \"function\") {\r\n                // 检测到有复制前需要执行的功能\r\n                this.beforeCopy();\r\n            }\r\n\r\n            let $iframe = document.getElementById(\"easyPrintIframe\");\r\n            // 复制body，打印内容\r\n            $iframe.contentDocument.body.innerHTML = this.$refs.template.innerHTML;\r\n\r\n            if (typeof this.beforePrint === \"function\") {\r\n                // 检测到有打印前需要执行的功能\r\n                // 比如有些二维码组件无法直接复制dom完成。\r\n                this.beforePrint();\r\n            }\r\n            \r\n            // 执行打印\r\n            this.$nextTick(() => { \r\n                setTimeout(() => {\r\n                    $iframe.contentWindow.print();\r\n                }, 100);\r\n             })\r\n        },\r\n        getStyle() {\r\n            let printI = document.getElementById(\"easyPrintIframe\");\r\n            var str = \"\",\r\n                styles1 = document.querySelectorAll(\"style\");\r\n            for (var i = 0; i < styles1.length; i++) {\r\n                str += styles1[i].outerHTML;\r\n            }\r\n\r\n            printI.contentDocument.head.innerHTML = str;\r\n            // 添加link引入\r\n            let styles = document.querySelectorAll(\"link\");\r\n            for (let i = 0; i < styles.length; i++) {\r\n                // chrome 正常，firefox不正常，能执行到，但是添加没结果\r\n                let link = document.createElement(\"link\");\r\n                link.setAttribute(\"rel\", \"stylesheet\");\r\n                if(styles[i].type) link.setAttribute(\"type\", styles[i].type);\r\n                else link.setAttribute(\"type\", 'text/css');\r\n                link.setAttribute(\"href\", styles[i].href);\r\n                link.setAttribute('media','all');\r\n                printI.contentDocument.head.appendChild(link);\r\n            }\r\n            \r\n        },\r\n        getChineseNumber(currencyDigits) {\r\n            // 转换数字到中文大写，请用prop传递给模版组件，这个函数在网上扣的。\r\n            var MAXIMUM_NUMBER = 99999999999.99;\r\n            // Predefine the radix characters and currency symbols for output:\r\n            var CN_ZERO = \"零\";\r\n            var CN_ONE = \"壹\";\r\n            var CN_TWO = \"贰\";\r\n            var CN_THREE = \"叁\";\r\n            var CN_FOUR = \"肆\";\r\n            var CN_FIVE = \"伍\";\r\n            var CN_SIX = \"陆\";\r\n            var CN_SEVEN = \"柒\";\r\n            var CN_EIGHT = \"捌\";\r\n            var CN_NINE = \"玖\";\r\n            var CN_TEN = \"拾\";\r\n            var CN_HUNDRED = \"佰\";\r\n            var CN_THOUSAND = \"仟\";\r\n            var CN_TEN_THOUSAND = \"万\";\r\n            var CN_HUNDRED_MILLION = \"亿\";\r\n            var CN_SYMBOL = \"\"; // 可以设置前缀 比如 人民币\r\n            var CN_DOLLAR = \"元\";\r\n            var CN_TEN_CENT = \"角\";\r\n            var CN_CENT = \"分\";\r\n            var CN_INTEGER = \"整\";\r\n\r\n            // Variables:\r\n            var integral; // Represent integral part of digit number.\r\n            var decimal; // Represent decimal part of digit number.\r\n            var outputCharacters; // The output result.\r\n            var parts;\r\n            var digits, radices, bigRadices, decimals;\r\n            var zeroCount;\r\n            var i, p, d;\r\n            var quotient, modulus;\r\n\r\n            // Validate input string:\r\n            if (currencyDigits === undefined) {\r\n                return \"\";\r\n            }\r\n            currencyDigits = currencyDigits.toString();\r\n            if (currencyDigits == \"\") {\r\n                // alert(\"Empty input!\");\r\n                return \"\";\r\n            }\r\n            if (currencyDigits.match(/[^,.\\d]/) != null) {\r\n                // alert(\"Invalid characters in the input string!\");\r\n                return \"\";\r\n            }\r\n            if (\r\n                currencyDigits.match(\r\n                    /^((\\d{1,3}(,\\d{3})*(.((\\d{3},)*\\d{1,3}))?)|(\\d+(.\\d+)?))$/\r\n                ) == null\r\n            ) {\r\n                // alert(\"Illegal format of digit number!\");\r\n                return \"\";\r\n            }\r\n\r\n            // Normalize the format of input digits:\r\n            currencyDigits = currencyDigits.replace(/,/g, \"\"); // Remove comma delimiters.\r\n            currencyDigits = currencyDigits.replace(/^0+/, \"\"); // Trim zeros at the beginning.\r\n            // Assert the number is not greater than the maximum number.\r\n            if (Number(currencyDigits) > MAXIMUM_NUMBER) {\r\n                alert(\"您输入的金额太大，请重新输入!\");\r\n                return \"\";\r\n            }\r\n\r\n            // Process the coversion from currency digits to characters:\r\n            // Separate integral and decimal parts before processing coversion:\r\n            parts = currencyDigits.split(\".\");\r\n            if (parts.length > 1) {\r\n                integral = parts[0];\r\n                decimal = parts[1];\r\n                // Cut down redundant decimal digits that are after the second.\r\n                decimal = decimal.substr(0, 2);\r\n            } else {\r\n                integral = parts[0];\r\n                decimal = \"\";\r\n            }\r\n            // Prepare the characters corresponding to the digits:\r\n            digits = new Array(\r\n                CN_ZERO,\r\n                CN_ONE,\r\n                CN_TWO,\r\n                CN_THREE,\r\n                CN_FOUR,\r\n                CN_FIVE,\r\n                CN_SIX,\r\n                CN_SEVEN,\r\n                CN_EIGHT,\r\n                CN_NINE\r\n            );\r\n            radices = new Array(\"\", CN_TEN, CN_HUNDRED, CN_THOUSAND);\r\n            bigRadices = new Array(\"\", CN_TEN_THOUSAND, CN_HUNDRED_MILLION);\r\n            decimals = new Array(CN_TEN_CENT, CN_CENT);\r\n            // Start processing:\r\n            outputCharacters = \"\";\r\n            // Process integral part if it is larger than 0:\r\n            if (Number(integral) > 0) {\r\n                zeroCount = 0;\r\n                for (i = 0; i < integral.length; i++) {\r\n                    p = integral.length - i - 1;\r\n                    d = integral.substr(i, 1);\r\n                    quotient = p / 4;\r\n                    modulus = p % 4;\r\n                    if (d == \"0\") {\r\n                        zeroCount++;\r\n                    } else {\r\n                        if (zeroCount > 0) {\r\n                            outputCharacters += digits[0];\r\n                        }\r\n                        zeroCount = 0;\r\n                        outputCharacters +=\r\n                            digits[Number(d)] + radices[modulus];\r\n                    }\r\n                    if (modulus == 0 && zeroCount < 4) {\r\n                        outputCharacters += bigRadices[quotient];\r\n                    }\r\n                }\r\n                outputCharacters += CN_DOLLAR;\r\n            }\r\n            // Process decimal part if there is:\r\n            if (decimal != \"\") {\r\n                for (i = 0; i < decimal.length; i++) {\r\n                    d = decimal.substr(i, 1);\r\n                    if (d != \"0\") {\r\n                        outputCharacters += digits[Number(d)] + decimals[i];\r\n                    }\r\n                }\r\n            }\r\n            // Confirm and return the final output string:\r\n            if (outputCharacters == \"\") {\r\n                outputCharacters = CN_ZERO + CN_DOLLAR;\r\n            }\r\n            if (decimal == \"\") {\r\n                outputCharacters += CN_INTEGER;\r\n            }\r\n            outputCharacters = CN_SYMBOL + outputCharacters;\r\n            return outputCharacters;\r\n        }\r\n    }\r\n};\r\n</script>\r\n"]}]}